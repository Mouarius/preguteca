# Generated by Django 4.1.7 on 2023-05-23 23:01
import json

from django.db import migrations
from django.db.migrations import RunPython

from question_library.data import parse_video_data


def load_video_entries(apps, schema_editor):
    parse_video_data.main()
    video_data_json_path = "question_library/data/video_data__parsed.json"

    VideoEntry = apps.get_model("question_library", "VideoEntry")
    Category = apps.get_model("question_library", "Category")
    VideoType = apps.get_model("question_library", "VideoType")

    def get_or_create_category(category_name, category_fullname):
        if not category_name:
            raise ValueError(f'Category name is {type(category_name)}')
        category_qs = Category.objects.filter(name=category_name).first()
        if not category_qs:
            category_qs = Category.objects.create(name=category_name, full_name=category_fullname)
        return category_qs

    def get_or_create_video_type(full_name):
        if not full_name:
            return None
        video_type_qs = VideoType.objects.filter(full_name=full_name).first()
        if not video_type_qs:
            video_type_qs = VideoType.objects.create(full_name=full_name)
        return video_type_qs

    with open(video_data_json_path) as file:
        video_entries = json.load(file)
        for video in video_entries:
            category = get_or_create_category(video["category_name"], video["category_fullname"])
            if not category:
                raise Exception(
                    f"Trying to create a category with name={video['category_name']} of type {type(video['category_name'])}")
            video_type = get_or_create_video_type(video["video_type"])
            new_video = VideoEntry(url=video["url"], questions=video["questions"], language=video["language"])
            new_video.save()
            new_video.video_types.add(video_type)
            category.video_entries.add(new_video)


class Migration(migrations.Migration):

    dependencies = [
        ('question_library', '0014_videotype_videoentry_language_videoentry_youtube_id_and_more'),
    ]

    operations = [
        RunPython(load_video_entries)
    ]
